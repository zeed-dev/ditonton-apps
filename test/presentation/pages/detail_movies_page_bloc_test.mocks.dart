// Mocks generated by Mockito 5.0.16 from annotations
// in ditonton/test/presentation/pages/detail_movies_page_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;

import 'package:bloc/bloc.dart' as _i12;
import 'package:ditonton/domain/usecases/get_movie_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_movie_recommendations.dart' as _i9;
import 'package:ditonton/domain/usecases/get_watchlist_movies.dart' as _i4;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i5;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i7;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i6;
import 'package:ditonton/presentation/bloc/movie_detail_bloc/movie_detail_bloc.dart'
    as _i3;
import 'package:ditonton/presentation/bloc/movie_recomendation_bloc/movie_recomendation_bloc.dart'
    as _i10;
import 'package:ditonton/presentation/bloc/watchlist_movie_bloc/watchlist_movie_bloc.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetMovieDetail_0 extends _i1.Fake implements _i2.GetMovieDetail {}

class _FakeMovieDetailState_1 extends _i1.Fake implements _i3.MovieDetailState {
}

class _FakeGetWatchlistMovies_2 extends _i1.Fake
    implements _i4.GetWatchlistMovies {}

class _FakeGetWatchListStatus_3 extends _i1.Fake
    implements _i5.GetWatchListStatus {}

class _FakeSaveWatchlist_4 extends _i1.Fake implements _i6.SaveWatchlist {}

class _FakeRemoveWatchlist_5 extends _i1.Fake implements _i7.RemoveWatchlist {}

class _FakeWatchlistMovieState_6 extends _i1.Fake
    implements _i8.WatchlistMovieState {}

class _FakeGetMovieRecommendations_7 extends _i1.Fake
    implements _i9.GetMovieRecommendations {}

class _FakeMovieRecomendationState_8 extends _i1.Fake
    implements _i10.MovieRecomendationState {}

/// A class which mocks [MovieDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailBloc extends _i1.Mock implements _i3.MovieDetailBloc {
  MockMovieDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_0()) as _i2.GetMovieDetail);
  @override
  set getMovieDetail(_i2.GetMovieDetail? _getMovieDetail) =>
      super.noSuchMethod(Invocation.setter(#getMovieDetail, _getMovieDetail),
          returnValueForMissingStub: null);
  @override
  _i3.MovieDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_1()) as _i3.MovieDetailState);
  @override
  _i11.Stream<_i3.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieDetailState>.empty())
          as _i11.Stream<_i3.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieDetailEvent>(
          _i12.EventHandler<E, _i3.MovieDetailState>? handler,
          {_i12.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i12.Transition<_i3.MovieDetailEvent, _i3.MovieDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  void onChange(_i12.Change<_i3.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WatchlistMovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistMovieBloc extends _i1.Mock
    implements _i8.WatchlistMovieBloc {
  MockWatchlistMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetWatchlistMovies get getWatchlistMovies =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistMovies),
          returnValue: _FakeGetWatchlistMovies_2()) as _i4.GetWatchlistMovies);
  @override
  set getWatchlistMovies(_i4.GetWatchlistMovies? _getWatchlistMovies) => super
      .noSuchMethod(Invocation.setter(#getWatchlistMovies, _getWatchlistMovies),
          returnValueForMissingStub: null);
  @override
  _i5.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
          returnValue: _FakeGetWatchListStatus_3()) as _i5.GetWatchListStatus);
  @override
  set getWatchListStatus(_i5.GetWatchListStatus? _getWatchListStatus) => super
      .noSuchMethod(Invocation.setter(#getWatchListStatus, _getWatchListStatus),
          returnValueForMissingStub: null);
  @override
  _i6.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlist_4()) as _i6.SaveWatchlist);
  @override
  set saveWatchlist(_i6.SaveWatchlist? _saveWatchlist) =>
      super.noSuchMethod(Invocation.setter(#saveWatchlist, _saveWatchlist),
          returnValueForMissingStub: null);
  @override
  _i7.RemoveWatchlist get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
          returnValue: _FakeRemoveWatchlist_5()) as _i7.RemoveWatchlist);
  @override
  set removeWatchlist(_i7.RemoveWatchlist? _removeWatchlist) =>
      super.noSuchMethod(Invocation.setter(#removeWatchlist, _removeWatchlist),
          returnValueForMissingStub: null);
  @override
  _i8.WatchlistMovieState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeWatchlistMovieState_6()) as _i8.WatchlistMovieState);
  @override
  _i11.Stream<_i8.WatchlistMovieState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i8.WatchlistMovieState>.empty())
          as _i11.Stream<_i8.WatchlistMovieState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.WatchlistMovieEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.WatchlistMovieEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i8.WatchlistMovieState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.WatchlistMovieEvent>(
          _i12.EventHandler<E, _i8.WatchlistMovieState>? handler,
          {_i12.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i12.Transition<_i8.WatchlistMovieEvent, _i8.WatchlistMovieState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  void onChange(_i12.Change<_i8.WatchlistMovieState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieRecomendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRecomendationBloc extends _i1.Mock
    implements _i10.MovieRecomendationBloc {
  MockMovieRecomendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_7())
          as _i9.GetMovieRecommendations);
  @override
  _i10.MovieRecomendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeMovieRecomendationState_8())
          as _i10.MovieRecomendationState);
  @override
  _i11.Stream<_i10.MovieRecomendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.MovieRecomendationState>.empty())
          as _i11.Stream<_i10.MovieRecomendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i10.MovieRecomendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.MovieRecomendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i10.MovieRecomendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i10.MovieRecomendationEvent>(
          _i12.EventHandler<E, _i10.MovieRecomendationState>? handler,
          {_i12.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i12.Transition<_i10.MovieRecomendationEvent,
                  _i10.MovieRecomendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  void onChange(_i12.Change<_i10.MovieRecomendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
